@startuml Diagrama_A3


class TesterMainExercise1{
    + buildNetwork(): void
    + main(String[] args): void
}

TesterMainExercise1 <|-- TesterMainExercise2

class TesterMainExercise2{
    + buildFaultyNetwork(): void
    + createTransactions(): void
    + main(String[] args): void
}

TesterMainExercise2 <|-- TesterMainExercise3

class TesterMainExercise3{
    + createTransactions(): void
    + main(String[] args): void
}

TesterMainExercise1 --> "3" Wallet: wallet1, wallet2, wallet3 >
TesterMainExercise1 --> "2" MiningNode: miningNode, miningNode2 >
TesterMainExercise1 --> "1" Node: node >
TesterMainExercise1 --> "1" Subnet: subnet >
TesterMainExercise1 --> "1" BlockChainNetwork: network >

class Wallet{
    - userName: String
    - key: String
    - balance: int

    + Wallet(String userName, String key, int balance)
    + getName(): String
    + getBalance(): int
    + getPublicKey(): String
    + modBalance(int cantidad): void
}

'-------------------------------------------------------------'

abstract ObjectWithId{
    - id: int
    - id_count: int

    + ObjectWithId()
    + getId(): int
}

ObjectWithId <|-- Node
ObjectWithId <|-- Subnet

class Node{
    - wallet: Wallet

    + Node(Wallet wallet)
    + createTransaction(Wallet wallet, int coins): Transaction
    + createTransaction(String PublicKey, int coins): Transaction
    + name(): String
    + fullname(): String
    + toString(): String
    + toString2(): String
}

Node <|-- MiningNode
Node --> "*" Transaction: transacciones >
Node --> "*" Transaction: transaccionesNoConfirmadas >

class MiningNode{
    - coins: int
    - parent: IConnectable
    - miningMethod: IMiningMethod
    - validateMethod: IValidateMethod
    - bloquesValidados: List<Block>

    + MiningNode(Wallet wallet, int coins)
    + fullname(): String
    + setMiningMethod(IMiningMethod miningMethod): void
    + setValidationMethod(IValidateMethod validateMethod): void
}

'-------------------------------------------------------------'

interface IMiningMethod{
    createHash(Block block): String
    mineBlock(Transaction transaction, Block previousConfirmedBlock, String MinerKey): Block
}

IMiningMethod <|.. SimpleMining

class SimpleMining{}

interface IValidateMethod{
    validate(IMiningMethod miningMethod, Block block): boolean
}

IValidateMethod <|.. SimpleValidate 

class SimpleValidate{}

'-------------------------------------------------------------'

class Subnet{
    - parent: IConnectable

    + Subnet(MiningNode... miningNodes)
    + fullname(): String
    + toString(): String
    + getMiningNodes(): List<MiningNode>
}

Subnet --> "1..*" MiningNode: miningNodes >

class BlockChainNetwork{
    - name: String
    
    + BlockChainNetwork(String name)
    + connect(Node node): BlockChainNetwork
    + connect(MiningNode miningNode): BlockChainNetwork
    + connect(Subnet subnet): BlockChainNetwork
    + toString(): String
    + getSubredes(): List<Subnet>
    + getNodosMineros(): List<MiningNode>
    + getNodosSimples(): List<Node>
}

BlockChainNetwork --> "1..*" ObjectWithId: elementos >

'-------------------------------------------------------------'

class Transaction{
    - id: int
    - id_count: int
    - emisorKey: String
    - receptorKey: String
    - valorTransaccion: int

    + Transaction(Wallet wallet1, Wallet wallet2, int coins)
    + Transaction(Wallet wallet1, String PublicKey, int coins)
    + getId(): int
    + getEmisorKey(): String
    + getReceptorKey(): String
    + getValorTransaccion(): int
}

class TransactionNotification{
    + TransactionNotification(Transaction transaction)
    + getTransaction(): Transaction
}

TransactionNotification "0..1" --> Transaction

'-------------------------------------------------------------'

interface IMessage{
    + getMessage(): void
    + process(Node n): void
}

IMessage <|.. TransactionNotification
IMessage <|.. ValidateBlockRq
IMessage <|.. ValidateBlockRes

IMessage <|.. Node
IMessage <|.. Subnet

interface IConnectable{
    + broadcast(IMessage msg): void
    + getParent(): IConnectable
    + getTopParent(): IConnectable
}

IConnectable <|.. Node
IConnectable <|.. Subnet
IConnectable <|.. BlockChainNetwork

class ValidateBlockRq{
    - bloque: Block
    - srcKey: int
    
    + ValidateBlockRq(Block bloque, int srcKey)
    + getSrcKey(): int
    + getBlock(): Block
}

class ValidateBlockRes{
    - bloque: Block
    - res: boolean
    - srcKey: Object

    + ValidateBlockRes(Block bloque, boolean res, int srcKey)
    + ValidateBlockRes(Block bloque, boolean res, String srcKey)
    + getMessageBroadcast(): String
    + getBlock(): Block
}

'-------------------------------------------------------------'

Exception <|-- ConnectionException
Exception <|-- TransactionException
ConnectionException <|-- DuplicateConnectionException

class ConnectionException{
    - message: String

    + ConnectionException(String message)
    + toString(): String
}

class DuplicateConnectionException{
    + DuplicateConnectionException(String message)
}

class TransactionException{
    - emisorKey : String
    - receptorKey: String
    - balance: int
    - message: String

    + TransactionException(String emisorKey, String receptorKey, int balance, String message)
    + toString(): String
}

'-------------------------------------------------------------'

class BlockConfig{
    + GENESIS_BLOCK: String
    + DIFFICULTY: int
    + VERSION: int
}

class CommonUtils{
    + shaGeneral(String data, String shaAlgorithm): String
    + sha256(String data): String
    + sha1(String data): String
}

'-------------------------------------------------------------'


@enduml